// GCD3 spec mining

ring r = (2, X), (a0, a1, a2, b0, b1, b2, c0, c1, d0, d1, d2, n_a0, n_a1, n_a2, n_b0, n_b1, n_b2, n_c0, n_c1, m0, m1, m2, m3, n0, n1, n2, p0, q0, q1, r0, r1, e, g, t, z, sub1_a, sub1_b, sub2_a, sub2_b, amuxEn, bmuxEn, regAEn, regBEn, regCEn, regDEn, amux1, amux2, bmux1, bmux2, dmux1, dmux2, dmux3, D, A, B, C, n_C, n_B, n_A), lp;

minpoly = X3 + X + 1;

// A + B Adders
//poly f1 = adder1 + a1 + b1;
//poly f2 = adder2 + a2 + b2;
poly f1_a = sub1_a + a1 + b1;
poly f1_b = sub1_b + a1 + b1;
poly f2_a = sub2_a + (b1 * (a1 + 1)) + a2 + b2;
poly f2_b = sub2_b + (a1 * (b1 + 1)) + a2 + b2;

// Comparator
// First level
poly f3 = m0 + a0 + b0 + 1; // XNOR
poly f4 = m1 + a1 + b1 + 1;
poly f5 = m2 + a2 + b2 + 1;
poly f6 = m3 + (a2 * (b2 + 1));

// Second level
poly f7 = e + (m0 * m1 * m2);
poly f8 = n0 + (m1 * m2);
poly f9 = n1 + (a0 * (b0 + 1));
poly f10 = n2 + (m2 * (a1 * (b1 + 1)));

// Last level + output
poly f11 = p0 + (n0 * n1);
poly f12 = g + ((p0 + n2 + (p0 * n2)) + m3) + ((p0 + n2 + (p0 * n2)) * m3);;
// End Comparator

// Register A Block
poly f13 = amuxEn + (a0 * b0 * g);
poly f14 = amux1 + ((sub1_a * amuxEn) + (a1 * (amuxEn + 1)));
poly f15 = amux2 + ((sub2_a * amuxEn) + (a2 * (amuxEn + 1)));

poly f16 = regAEn + (a0 + 1) + amuxEn + ((a0 + 1) * amuxEn); // OR
// How to do a register? Not sure
poly f17 = n_a0 + (a0 * (regAEn + 1)) + (amux1 * regAEn);
poly f18 = n_a1 + (a1 * (regAEn + 1)) + (amux2 * regAEn);
poly f19 = n_a2 + (a2 * (regAEn + 1));
// End Register A Block

// Register B Block
poly f20 = bmuxEn + (a0 * b0 * (g + 1));
poly f21 = bmux1 + (sub1_b * bmuxEn) + (b1 * (bmuxEn + 1));
poly f22 = bmux2 + (sub2_b * bmuxEn) + (b2 * (bmuxEn + 1));
//poly f21 = bmux1 + b1;
//poly f22 = bmux2 + b2;

poly f23 = regBEn + (b0 + 1) + bmuxEn + ((b0 + 1) * bmuxEn); // OR
//poly f23 = regBEn + 1;
poly f24 = n_b0 + (b0 * (regBEn + 1)) + (bmux1 * regBEn);
poly f25 = n_b1 + (b1 * (regBEn + 1)) + (bmux2 * regBEn);
poly f26 = n_b2 + (b2 * (regBEn + 1));
// End Register B Block

// Accumulator C Block
poly f27 = regCEn + ((a0 + 1) * (b0 + 1));
poly f28 = q0 + regCEn + c0;
poly f29 = q1 + regCEn * c1;
poly f30 = n_c0 + (c0 * (regCEn + 1)) + (q0 * regCEn);
poly f31 = n_c1 + (c1 * (regCEn + 1)) + (q1 * regCEn);
// End Accumulator C Block

// Output D Block
poly f32 = r0 + c0 + c1 + (c0 * c1);
poly f33 = r1 + ((a2 + 1) * (a1 + 1) * (a0 + 1));
poly f34 = dmux1 + (b0 * (r0 + 1));
poly f35 = dmux2 + (b1 * (r0 + 1)) + ((c1 + 1) * c0 * b0);
poly f36 = dmux3 + (b2 * (r0 + 1)) + ((c1 + 1) * c0 * b1) + (c1 * (c0 + 1) * b0);
//poly f34 = dmux1 + b0;
//poly f35 = dmux2 + b1;
//poly f36 = dmux3 + b2;
poly f37 = regDEn + e + r1 + (e * r1);
poly f38 = d0 + (dmux1 * regDEn);
poly f39 = d1 + (dmux2 * regDEn);
poly f40 = d2 + (dmux3 * regDEn);
// End Output D Block

// Word level variables
poly f41 = A + a2 * X2 + a1 * X + a0;
poly f42 = B + b2 * X2 + b1 * X + b0;
poly f43 = C + c1 * X + c0;
poly f44 = D + d2 * X2 + d1 * X + d0;
poly f45 = n_A + n_a2 * X2 + n_a1 * X + n_a0;
poly f46 = n_B + n_b2 * X2 + n_b1 * X + n_b0;
poly f47 = n_C + n_c1 * X + n_c0;

// Ideal described by this circuit
ideal J = f1_a, f1_b, f2_a, f2_b, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47;

// Vanishing polynomials
poly f59 = a0^2 + a0;
poly f60 = a1^2 + a1;
poly f61 = a2^2 + a2;
poly f62 = b0^2 + b0;
poly f63 = b1^2 + b1;
poly f64 = b2^2 + b2;
poly f65 = c0^2 + c0;
poly f66 = c1^2 + c1;
poly f67 = d0^2 + d0;
poly f68 = d1^2 + d1;
poly f69 = d2^2 + d2;
poly f70 = n_a0^2 + n_a0;
poly f71 = n_a1^2 + n_a1;
poly f72 = n_a2^2 + n_a2;
poly f73 = n_b0^2 + n_b0;
poly f74 = n_b1^2 + n_b1;
poly f75 = n_b2^2 + n_b2;
poly f76 = n_c0^2 + n_c0;
poly f77 = n_c1^2 + n_c1;
poly f78 = m0^2 + m0;
poly f79 = m1^2 + m1;
poly f80 = m2^2 + m2;
poly f81 = m3^2 + m3;
poly f82 = n0^2 + n0;
poly f83 = n1^2 + n1;
poly f84 = n2^2 + n2;
poly f85 = p0^2 + p0;
poly f86 = q0^2 + q0;
poly f87 = q1^2 + q1;
poly f88 = r0^2 + r0;
poly f89 = r1^2 + r1;
poly f90 = e^2 + e;
poly f91 = g^2 + g;
poly f92 = t^2 + t;
poly f93 = z^2 + z;
poly f94 = sub1_a^2 + sub1_a;
poly f95 = sub1_b^2 + sub1_b;
poly f96 = amuxEn^2 + amuxEn;
poly f97 = bmuxEn^2 + bmuxEn;
poly f98 = regAEn^2 + regAEn;
poly f99 = regBEn^2 + regBEn;
poly f100 = regCEn^2 + regCEn;
poly f101 = regDEn^2 + regDEn;
poly f102 = amux1^2 + amux1;
poly f103 = amux2^2 + amux2;
poly f104 = bmux1^2 + bmux1;
poly f105 = bmux2^2 + bmux2;
poly f106 = dmux1^2 + dmux1;
poly f107 = dmux2^2 + dmux2;
poly f108 = dmux3^2 + dmux3;
poly f109 = n_A^8 + n_A;
poly f110 = n_B^8 + n_B;
poly f111 = n_C^8 + n_C;
poly f112 = A^8 + A;
poly f113 = B^8 + B;
poly f114 = C^8 + C;
poly f115 = D^8 + D;
poly f116 = sub2_a^2 + sub2_a;
poly f117 = sub2_b^2 + sub2_b;


ideal J0 = f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75, f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87, f88, f89, f90, f91, f92, f93, f94, f95, f96, f97, f98, f99, f100, f101, f102, f103, f104, f105, f106, f107, f108, f109, f110, f111, f112, f113, f114, f115, f116, f117;

poly A_init = A + 1;
poly B_init = B + 1;
poly C_init = C;

ideal Jinit = A_init, B_init, C_init;
//ideal Jinit = C_init;

ideal Jt = J + J0 + Jinit;

ideal gb = slimgb(Jt);
gb = eliminate(gb, a0*a1*a2*b0*b1*b2*c0*c1*d0*d1*d2*n_a0*n_a1*n_a2*n_b0*n_b1*n_b2*n_c0*n_c1*m0*m1*m2*m3*n0*n1*n2*p0*q0*q1*r0*r1*e* g*t*z*sub1_a*sub1_b*sub2_a*sub2_b*amuxEn*bmuxEn*regAEn*regBEn*regCEn*regDEn*amux1*amux2*bmux1*bmux2*dmux1*dmux2*dmux3);




